#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Getopt::Long qw(GetOptionsFromArray :config no_ignore_case);
use Date::Parse qw(strptime);
use Unicode::Normalize;
use Text::Unidecode;
use Encode;
use POSIX qw(strftime);

sub slugify_url($) {
  my ($input) = @_;
  my $len = 61;
  my $rand = 4;
  my $digits = sprintf("%0${rand}.0f", rand(10**$rand));
  $input = decode_utf8($input);             # Make sure we're dealing with Unicode
  $input = NFC($input);                     # Normalize (recompose) the Unicode string
  $input = unidecode($input);               # Convert non-ASCII characters to closest equivalents
  $input =~ s/[^\w\s-]//g;                  # Remove all characters that are not word characters (includes _), spaces, or hyphens
  $input =~ s/^\s+|\s+$//g;                 # Trim whitespace from both ends
  $input = lc($input);
  $input =~ s/[-\s]+/-/g;                   # Replace all occurrences of spaces and hyphens with a single hyphen
  $input = substr($input, 0, $len-$rand-1); # Truncate string
  $input = $input . '-' . $digits;          # $rand digits added to the end

  return $input;
}

sub hyperlink {
  my $author = shift;
  my $url = shift;
  my $ans = $author;
  if (defined($url) && length($url)) {
    $ans = "<a href = '$url'>$author</a>";
  }
  return $ans;
}
  
my $cparams =
  {
          help => undef,
           man => undef,
        infile => undef,
        outdir => './_posts/',
         title => undef,
        author => ['anonymous'],
           url => [''],
          date => POSIX::strftime("%Y-%m-%d %H:%M:%S %z", localtime),
    nocomments => undef,
  };

GetOptions
  (
   # General commandline processing.
          'help|h|?' => \$cparams->{'help'},
             'man|m' => \$cparams->{'man'},
        'infile|i=s' => \$cparams->{'infile'},
        'outdir|o=s' => \$cparams->{'outdir'},
         'title|t=s' => \$cparams->{'title'},
    'author|a:s@{,}' => \$cparams->{'author'},
       'url|u:s@{,}' => \$cparams->{'url'},
          'date|d=s' => \$cparams->{'date'},
      'nocomments|n' => \$cparams->{'nocomments'},
  ) || pod2usage(2);

my @strptime = strptime($cparams->{'date'});
# Month is 0-based and year is -1900.
my $dateonly = sprintf("%4d-%02d-%02d", $strptime[5]+1900, $strptime[4]+1, $strptime[3]);

my $filename = slugify_url(sprintf("%s %s", $dateonly, $cparams->{'title'})) . '.md';

pod2usage(-verbose => 2) if $cparams->{'man'};
pod2usage() if $cparams->{'help'};

if ($cparams->{'infile'}) {
  die 'ERROR: File specified by --infile, -i doesn\'t exist' unless (-e $cparams->{'infile'});
  die 'ERROR: File specified by --infile, -i isn\'t readable' unless (-r $cparams->{'infile'});
}

die 'ERROR: Directory specified by --outdir, -o doesn\'t exist' unless (-e $cparams->{'outdir'});
die 'ERROR: Directory specified by --outdir, -o isn\'t writable' unless (-w $cparams->{'outdir'});

my $outfile = sprintf("%s/%s", $cparams->{'outdir'}, $filename);
$outfile =~ s/[\/]{2,}/\//g;

if ($#{$cparams->{'url'}} == 0 && $#{$cparams->{'url'}} < $#{$cparams->{'author'}} && $cparams->{'url'}[0] eq '') {
  $cparams->{'url'} = [('')x($#{$cparams->{'author'}}+1)];
}

die 'ERROR: The number of authors specified by --author, -a should be the same as the number of urls specified by --url, -u' unless ($#{$cparams->{'author'}} == $#{$cparams->{'url'}});

my $byline = 
  sprintf "\"%s\"",
  join ', ', 
  map { hyperlink($cparams->{'author'}[$_], $cparams->{'url'}[$_]) }
     (0..$#{$cparams->{'author'}});

my $head = "---
layout: post
title: \"$cparams->{'title'}\"
date: \"$cparams->{'date'}\"
comments: " . (defined($cparams->{'nocomments'}) ? 'false' : 'true') . " 
author: $byline
categories: samplingprocess
---
";

#print Dumper($cparams);
#exit;
open(OUTFILE, ">$outfile");
print OUTFILE $head;
if (defined($cparams->{'infile'})) {
  open(INFILE, $cparams->{'infile'});
  while (<INFILE>) {
    print OUTFILE $_;
  }
}

########################
# Documentation below. #
########################

__END__

=head1 NAME

format_blog_post - This script accepts a markdown document and formats
a blog post and outputs it to the appropriate filename.

=head1 SYNOPSIS

format_blog_post [[--help | -h | -?]] [[--man | -m]] [--title | -t] 'I<Post Title>' [[--infile | -i] I<filename>]
[[--outdir | -o] I<directoryname>] [[--author | -a] 'I<Author Name>' ... ] [[--url | -u] I<url> ... ] 
[[--date | -d] 'I<%Y-%m-%d %H:%M:%S %z>'] [[--nocomments | -n]]

Options:

=over 8

--help, -h, -?

=over 4

Brief help message.

=back

--man, -m

=over 4

Full documentation in man format. Requires that perl-doc be installed.

=back

--title, -i 'I<Post Title>'

=over 4

Title of blog post.

=back

--infile, -i I<filename>

=over 4

Optional input file containing the blog post formatted in markdown.

=back

--outdir, -o I<directoryname>

=over 4

Optional output directory where blog post is written.

=back

=back

=head1 OPTIONS

=over 8

=item B<--help, -h, -?>

Print a brief help message and exit.

=item B<--man, -m>

Load full documentation in manual page format into the pager and exit.

=item B<--title, -t> 'I<Post Title>'

The title of the blog post. The title will be placed at the top of the
document immediately after the header and will formatted with the
markdown H1 header. The title will also serve as the part of the name
following the date in the newly created file, with whitespace replaced
by dashes.

=item B<--infile, -i> I<filename>

Optional. The input file containing the blog post in markdown format. The title
should be omitted from this document as it will be added by the blog
formatting template. Not specifying the value produces and empty blog
post with all other elements filled out.

=item B<--outdir, -o> I<directoryname>

Optional. Path to directory where the output will be written. Defaults
to './_posts/'.

=item B<--author, -a> 'I<Author Name 1>' ['I<Author Name 2>' ...]

Optional. Name of the author of the blog post. If the name contains
spaces, it should be surrounded by quotes. This parameter accepts
multiple arguments, each separated by spaces. If this parameter is used
with B<--url, -u>, then both should have the same number of arguments.

=item B<--url, -u> I<url>

Optional. URL to author's website. If this parameter is used with
B<--author, -a>, then both should have the same number of arguments.
To leave a URL blank, use the empty string ''.

=item B<--date, -d> 'I<%Y-%m-%d %H:%M:%S %z>'

Optional. Combined date and time in the ISO 8601 standard. Default is
current time and UTC offset.

=back

=head1 DESCRIPTION

This tool formats a blog post in the style of the Sampling Process blog
circa September 6, 2017. The only required parameter is the B<--title, -t>.
Without any parameters, a blank blog post with appropriate YAML Front
Matter is output into the './_posts/' directory indicating 'anonymous'
as the author and the current time.

Long blog posts that would take up too much space on the main blog post
listing page can provide a preview by inserting a I<E<lt>!--excerpt--E<gt>>
at the position in the post to provide as a preview.

Generally speaking, the text preceding the I<E<lt>!--excerpt--E<gt>>
break should not contain major section formatting to conform to the
blog's style. This is because section headers will appear in the
post previews on the blog listing page.

=head1 EXAMPLES

 # The following are all acceptable:

 # Specify only a title.
 $ format_blog_post --title 'Title Only Blog Post'

 # Specify a title and an author.
 $ format_blog_post --title 'Another title' --author 'Jane Doe'

 # Specify a title and an author and a url.
 $ format_blog_post --title 'Yet another title' --author 'John Doe' --url /people/Doe.html

 # Specify an alternate date.
 $ format_blog_post --date '2017-08-21 12:00:00 -0700' --title 'Latest Blog Post' --author 'John Doe' --url /people/Doe.html

=head1 AUTHOR

Written by J.J. Emerson.

=head1 REPORTING BUGS

Report all bugs to J.J. Emerson <jj.emerson@gmail.com>.

=cut
